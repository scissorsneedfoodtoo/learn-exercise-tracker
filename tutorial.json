{
  "version": "0.0.1",
  "summary": {
    "title": "Exercise Tracker",
    "description": "> Welcome to the Exercise Tracker certification project!"
  },
  "config": {
    "setup": {
      "commands": [
        "cd .freeCodeCamp && npm install",
        "./.freeCodeCamp/reset.sh"
      ],
      "commits": [
        "9c5462322a2c0ba00a219f5cff5bd0250c6720f9"
      ]
    },
    "testRunner": {
      "command": "npm run programmatic-test",
      "args": {
        "tap": "--reporter=mocha-tap-reporter"
      },
      "directory": ".freeCodeCamp"
    },
    "repo": {
      "uri": "https://github.com/scissorsneedfoodtoo/learn-exercise-tracker",
      "branch": "v0.0.1"
    },
    "reset": {
      "commands": [
        "./.freeCodeCamp/reset.sh"
      ]
    },
    "dependencies": [
      {
        "name": "node",
        "version": ">=10"
      }
    ]
  },
  "levels": [
    {
      "id": "1",
      "title": "Instructions",
      "summary": "Build a full stack JavaScript app that is functionally similar to this: https...",
      "content": "Build a full stack JavaScript app that is functionally similar to this: https://exercise-tracker.freecodecamp.rocks/\n\nInstall your project dependencies by entering `npm ci` from the `exercise-tracker` folder in the terminal. After that, start your server by running `npm start`. Follow the instructions in the terminal to view your project web page. Don't forget that you need to restart your server in order for your code changes to take place. Pass all the user stories below to complete the project.",
      "steps": [
        {
          "id": "1.1",
          "content": "Complete the tasks below",
          "subtasks": [
            "You should provide your own project, not the example URL.",
            "You can `POST` to `/api/users` with form data `username` to create a new user.",
            "The returned response from `POST /api/users` with form data `username` will be an object with `username` and `_id` properties.",
            "You can make a `GET` request to `/api/users` to get a list of all users.",
            "The `GET` request to `/api/users` returns an array.",
            "Each element in the array returned from `GET /api/users` is an object literal containing a user's `username` and `_id`.",
            "You can `POST` to `/api/users/:_id/exercises` with form data `description`, `duration`, and optionally `date`. If no date is supplied, the current date will be used.",
            "The response returned from `POST /api/users/:_id/exercises` will be the user object with the exercise fields added.",
            "You can make a `GET` request to `/api/users/:_id/logs` to retrieve a full exercise log of any user.",
            "A request to a user's log `GET /api/users/:_id/logs` returns a user object with a `count` property representing the number of exercises that belong to that user.",
            "A `GET` request to `/api/users/:id/logs` will return the user object with a `log` array of all the exercises added.",
            "Each item in the `log` array that is returned from `GET /api/users/:id/logs` is an object that should have a `description`, `duration`, and `date` properties.",
            "The `description` property of any object in the `log` array that is returned from `GET /api/users/:id/logs` should be a string.",
            "The `duration` property of any object in the `log` array that is returned from `GET /api/users/:id/logs` should be a number.",
            "The `date` property of any object in the `log` array that is returned from `GET /api/users/:id/logs` should be a string. Use the `dateString` format of the `Date` API.",
            "You can add `from`, `to` and `limit` parameters to a `GET /api/users/:_id/logs` request to retrieve part of the log of any user. `from` and `to` are dates in `yyyy-mm-dd` format. `limit` is an integer of how many logs to send back."
          ],
          "setup": {
            "commits": []
          }
        }
      ]
    }
  ]
}